<!DOCTYPE html>
<html>
  <head>
    <title><%= title %></title>
    <link rel='stylesheet' href='/stylesheets/style.css' />
    <script src="https://cdn.tailwindcss.com"></script>

    <script
            src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCFRCi9RiQ6jNMjspjXa6wVSVH7rbBnIGc&callback=initMap&v=weekly"
            defer
    ></script>
    <script>
      //let poly;
      let map;
      let mapOnCLickListener;
      let geocoder;
      let imageOverlay;
      let floorplanCoordinates;
      let allFloorplans;
      let cornerMarkers;
      let polylines = [];
      let overlays = new Map();
      let markerPairs = [];
      let favColor = "#0cfabf";
      let currentPolyline;
      const toleranceRadius = 3; //snap to point radius
      let highlightedVertexIndex = null; //next line will be drawn from this vetrtex
      let currentFloorPlanOrder;
      const FloorPlanOptions = {
        FLOORS: 'Floors',
        POINTS_OF_INTEREST: 'Points of interest',
        PATHS: 'Paths'
      };

      async function initMap() {
        await loadFloors();
        if (allFloorplans && allFloorplans.length > 0) {
          center = allFloorplans[0].center;
          map = new google.maps.Map(document.getElementById("map"), {
            zoom: 20,
            center: center,
            disableDefaultUI: true,
          });
        } else {
          map = new google.maps.Map(document.getElementById("map"), {
            zoom: 19,
            center: { lat: 53.38169097419639, lng: -1.4820265913660122 },
            disableDefaultUI: true,
          });
        }
        displayFloorPlan(0);

        // Create the button.
        const saveBtn = createSaveBtn(map);
        saveBtn.classList.add("button", "button-primary");
        saveBtn.style.padding = "10px";
        saveBtn.style.borderRadius = "4px";
        saveBtn.style.fontSize = "18px";
        saveBtn.style.backgroundColor = "orange";
        saveBtn.style.border = "1px solid black"

        await loadPolylines();
        createFloorSelectors();

        geocoder = new google.maps.Geocoder();

        const inputAddress = document.createElement("input");

        inputAddress.type = "text";
        inputAddress.placeholder = "Enter a postcode";
        inputAddress.id = "inputAddress";

        const searchButton = document.createElement("input");

        searchButton.type = "button";
        searchButton.value = "Search";
        searchButton.id = "searchButton";
        searchButton.classList.add("button", "button-primary");

        const rotationSlider = document.createElement("input");
        rotationSlider.type = "range";
        rotationSlider.id = "rotationSlider";
        rotationSlider.min = "-180";
        rotationSlider.max = "180";
        rotationSlider.step = "1";
        if (imageOverlay) {
          rotationSlider.value = imageOverlay.rotation;
        } else {
          rotationSlider.value = "0";
        }
        //rotationSlider.style.display = "none";
        const sliderLabel = document.createElement("p");
        sliderLabel.id = "sliderLabel";
        sliderLabel.classList.add("button-label");
        sliderLabel.innerHTML = "Adjust rotation";

        const sliderContainer = document.createElement("div");
        sliderContainer.id = "sliderContainer";
        sliderContainer.classList.add("slider-container");
        sliderContainer.appendChild(sliderLabel);
        sliderContainer.appendChild(rotationSlider);

        const instructionsElement = document.createElement("p");
        instructionsElement.id = "instructions";
        instructionsElement.innerHTML =
                "<strong>Tip</strong>: Click on the map to select the exact location of the bulding";

        const dropdown = document.createElement('select');
        dropdown.id = 'editModeDropdown';
        dropdown.style.marginTop = "20px";
        dropdown.style.paddingLeft = "10px";
        dropdown.style.fontSize = "18px"
        // Step 3: Add options to the dropdown menu
        const options = [
          { value: FloorPlanOptions.FLOORS},
          { value: FloorPlanOptions.POINTS_OF_INTEREST},
          { value: FloorPlanOptions.PATHS},
        ];

        options.forEach(optionData => {
          const option = document.createElement('option');
          option.value = optionData.value;
          option.text = optionData.value;
          dropdown.appendChild(option);
        });

        const topRightHContainer = document.createElement("div");
        topRightHContainer.id = "topRightHContainer";
        topRightHContainer.classList.add("horizontal-container");
        topRightHContainer.appendChild(dropdown);
        topRightHContainer.appendChild(saveBtn);

        const addFloorBtn = document.createElement("button");
        addFloorBtn.id = "addFloorBtn";
        addFloorBtn.textContent = "Add Floor +";
        addFloorBtn.style.display = "inline-block";
        addFloorBtn.style.whiteSpace = "nowrap";
        addFloorBtn.style.color = "white";
        addFloorBtn.style.fontSize = "18px";
        addFloorBtn.style.backgroundColor = "orange";
        addFloorBtn.style.marginLeft = "10px";
        addFloorBtn.style.marginTop = "10px";
        addFloorBtn.style.padding = "10px";
        addFloorBtn.style.border = "1px solid black"
        addFloorBtn.style.borderRadius = "6px";

        map.controls[google.maps.ControlPosition.LEFT_TOP].push(addFloorBtn);
        map.controls[google.maps.ControlPosition.TOP_RIGHT].push(topRightHContainer);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(inputAddress);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(searchButton);
        map.controls[google.maps.ControlPosition.TOP_CENTER].push(sliderContainer);
        map.controls[google.maps.ControlPosition.LEFT_TOP].push(instructionsElement);
        map.controls[google.maps.ControlPosition.TOP_RIGHT].push(dropdown);

        mapOnCLickListener = map.addListener("click", (e) => {
          floorplanCoordinates = e.latLng;
          map.setCenter(floorplanCoordinates);
          togglePopup();
        });
        addFloorBtn.addEventListener("click", (e) => {
          togglePopup();
        });
        rotationSlider.addEventListener('input', (event) => {
          const angle = parseInt(event.target.value, 10);
          imageOverlay.setRotation(angle);
        });

        searchButton.addEventListener("click", () => {
          geocode({address: inputAddress.value});
          document.getElementById("instructions").style.display = 'block';
        });
        // floorplanOverlay.addListener("click", (event) => {
        //   if (!currentPolyline) {
        //     startNewPolyline();
        //   }
        //   addLatLng(event);
        //   highlightVertex(event);
        // });
        document.getElementById('floorPlanForm').addEventListener('submit', async function (event) {
          event.preventDefault();

          const formData = new FormData(this);
          let groundFloorRotation = 0; //not set
          let groundFloorCorners;
          if(floorplanCoordinates) {
            // The distance from the center to the corners (in degrees)
            const latOffset = 0.00000897 * 25;
            const lngOffset = 0.00000897 * 50;
            groundFloorCorners = {
              northEast: {lat: floorplanCoordinates.lat() + latOffset, lng: floorplanCoordinates.lng() + lngOffset}, // northEast
              southWest: {lat: floorplanCoordinates.lat() - latOffset, lng: floorplanCoordinates.lng() - lngOffset}  // southWest
            };
          }
          if(!floorplanCoordinates && allFloorplans[0]) {
            floorplanCoordinates = allFloorplans[0].center;
            groundFloorRotation = allFloorplans[0].rotation;
            groundFloorCorners = allFloorplans[0].corners;
          }
          formData.append('center', JSON.stringify(floorplanCoordinates));
          formData.append('rotation', groundFloorRotation);
          formData.append('corners', JSON.stringify({
            northEast: { lat: groundFloorCorners.northEast.lat, lng: groundFloorCorners.northEast.lng },
            southWest: { lat: groundFloorCorners.southWest.lat, lng: groundFloorCorners.southWest.lng }
          }));
          floorplanCoordinates = null;

          const response = await fetch('/api/floorPlans', {
            method: 'POST',
            body: formData
          });

          if (response.ok) {
            togglePopup();
            google.maps.event.removeListener(mapOnCLickListener);
            mapOnCLickListener = null;
            searchButton.style.display = "none";
            inputAddress.style.display = "none";
            await loadFloors();
            displayFloorPlan(formData.get("order"));
            createFloorSelectors();
            alert('Floor plan created successfully');

            // Optionally, refresh the page or update the UI with the new floor plan
          } else {
            alert('Failed to create floor plan');
          }
        });
        if(allFloorplans){
          if (allFloorplans.length > 0) {
            searchButton.style.display = "none";
            inputAddress.style.display = "none";
          }
        }
      }
      function geocode(request) {
        geocoder.geocode(request, (results, status) => {
          if (status === "OK") {
            map.setCenter(results[0].geometry.location);
          } else {
            alert("Geocode was not successful for the following reason: " + status);
          }
        });
      }
      function createFloorSelectors() {
        if(!allFloorplans) {
          return;
        }
        let floorSelectContainer = document.createElement('div');
        floorSelectContainer.id = "floorSelectContainer";
        floorSelectContainer.classList.add("vertical-container");
        floorSelectContainer.style.gap = "5px";
        let floorSelectors = new Map();
        allFloorplans.forEach(function(floor) {
          let btn = document.createElement('button');
          btn.textContent = floor.name;
          btn.label = floor.name;
          btn.style.display = "inline-block";
          btn.style.whiteSpace = "nowrap";
          btn.style.color = "black";
          btn.style.fontSize = "18px";
          btn.style.backgroundColor = "white";
          btn.style.marginRight = "10px";
          btn.style.marginTop = "10px";
          btn.style.padding = "10px";
          btn.style.border = "1px solid #007bff"
          btn.style.borderRadius = "6px";
          floorSelectors.set(floor.order, btn);
          //floorSelectContainer.appendChild(btn);
          map.controls[google.maps.ControlPosition.RIGHT_CENTER].push(btn);
          btn.addEventListener('click', function() {
            displayFloorPlan(floor.order);
          });
        });

      }
      async function loadFloors() {
        const response = await fetch('/api/floorPlans');
        const floorPlans = await response.json();
        floorPlans.sort((a, b) => a.order - b.order);
        allFloorplans = floorPlans;
      }

      function displayFloorPlan(floorNum) {
        if(allFloorplans.length < 1) {
          console.log("There are no floors");
          return;
        }
        let alreadyExists = false;
        if (overlays) {
          for(const overlay of overlays.values()) {
            if (overlay.floorOrder === floorNum) {
              alreadyExists = true;
              imageOverlay = overlay;
              overlay.setIsVisible(true);
              overlay.markers.northEast.setMap(map);
              overlay.markers.southWest.setMap(map);

            } else {
              overlay.setIsVisible(false);
              overlay.markers.northEast.setMap(null);
              overlay.markers.southWest.setMap(null);
            }
          }
        }
        let center = allFloorplans[floorNum].center;
        currentFloorPlanOrder = floorNum;
        class CustomImageOverlay extends google.maps.OverlayView {
          constructor(imageUrl, corners, map, rotation, floorNum, markers) {
            super();
            this.imageUrl = imageUrl;
            this.corners = corners; // An array of LatLng objects [northEast, northWest, southEast, southWest]
            this.map = map;
            this.div = null;
            this.rotation = rotation || 0; // Rotation angle in degrees
            this.setMap(map);
            this.floorOrder = floorNum;
            this.markers = markers;
            this.visible = true;
          }

          onAdd() {
            this.div = document.createElement('div');
            this.div.style.border = 'solid #007bff';
            this.div.style.borderWidth = '2px';
            this.div.style.position = 'absolute';

            const img = document.createElement('img');
            img.src = this.imageUrl;
            img.style.width = '100%';
            img.style.height = '100%';
            img.style.position = 'absolute';
            img.style.transformOrigin = 'center';
            img.style.opacity = '0.5';
            this.img = img;
            this.div.appendChild(img);

            const panes = this.getPanes();
            panes.overlayLayer.appendChild(this.div);
          }

          draw() {
            if (!this.visible) {
              this.div.style.display = 'none';
              return;
            }

            this.div.style.display = 'block';
            const overlayProjection = this.getProjection();

            const ne = overlayProjection.fromLatLngToDivPixel(this.corners.northEast);
            const sw = overlayProjection.fromLatLngToDivPixel(this.corners.southWest);

            const div = this.div;
            div.style.left = sw.x + 'px';
            div.style.top = ne.y + 'px';
            div.style.width = (ne.x - sw.x) + 'px';
            div.style.height = (sw.y - ne.y) + 'px';

            // Apply rotation transform
            this.div.style.transform = `rotate(${this.rotation}deg)`;
          }

          onRemove() {
            this.div.parentNode.removeChild(this.div);
            this.div = null;
          }

          updateCorners(corners) {
            this.corners = corners;
            this.draw();
          }

          setRotation(angle) {
            this.rotation = angle;
            this.draw();
          }
          setIsVisible(val) {
            this.visible = val;
            this.draw();
          }
        }
        //############################
        if (!alreadyExists) {
          // Calculate the initial corners based on the center coordinate
          let corners;
          corners = allFloorplans[floorNum].corners;
          cornerMarkers = {
            northEast: new google.maps.Marker({
              position: corners.northEast,
              map: map,
              draggable: true,
              title: "North-East Corner"
            }),
            southWest: new google.maps.Marker({
              position: corners.southWest,
              map: map,
              draggable: true,
              title: "South-West Corner"
            }),
          };
          imageOverlay = new CustomImageOverlay(allFloorplans[floorNum].img, corners, map, allFloorplans[floorNum].rotation, floorNum, cornerMarkers);
          overlays.set(floorNum, imageOverlay);

          function updateCorners() {
            corners.northEast = cornerMarkers.northEast.getPosition();
            corners.southWest = cornerMarkers.southWest.getPosition()
            imageOverlay.updateCorners(corners);
          }

          for (let key in cornerMarkers) {
            cornerMarkers[key].addListener('drag', updateCorners);
          }
        }
      }
      function startNewPolyline() {
        currentPolyline = new google.maps.Polyline({
          strokeColor: "#FF0000",
          strokeOpacity: 1.0,
          strokeWeight: 3,
          editable: true,
          draggable: true,
          icons: []
        });
        currentPolyline.setMap(map);
        polylines.push(currentPolyline);

        const path = currentPolyline.getPath();
        google.maps.event.addListener(path, 'set_at', () => handleVertexDrag(path));
        google.maps.event.addListener(path, 'insert_at', () => handleVertexDrag(path));
        attachDeleteMenuListener(currentPolyline);
        attachVertexClickListener(currentPolyline);
      }
      function attachVertexClickListener(polyline) {
        google.maps.event.addListener(polyline, "click", (e) => {
          if (e.vertex == undefined) {
            return;
          }
          console.log(polyline.getPath().getAt(e.vertex));
          completeCurrentPolyline();
          startNewPolyline();
          addLatLng(e);
          highlightVertex(e);
        });
      }

      function handleVertexDrag(path) {
        for (let i = 0; i < path.getLength(); i++) {
          const point = path.getAt(i);
          const snappedPoint = findNearbyPoint(point);
          if (snappedPoint && !point.equals(snappedPoint)) {
            path.setAt(i, snappedPoint);
          }
        }
      }

      function addLatLng(event) {
        const path = currentPolyline.getPath();
        const newPoint = event.latLng;

        // Check for nearby points to snap to
        const snappedPoint = findNearbyPoint(newPoint);
        if (snappedPoint) {
          path.push(snappedPoint);
        } else {
          path.push(newPoint);
        }
      }
      function attachDeleteMenuListener(polyline) {
        /**
         * A menu that lets a user delete a selected vertex of a path.
         */
        class DeleteMenu extends google.maps.OverlayView {
          div_;
          divListener_;
          constructor() {
            super();
            this.div_ = document.createElement("div");
            this.div_.className = "delete-menu";
            this.div_.innerHTML = "Delete";

            const menu = this;

            google.maps.event.addDomListener(this.div_, "click", (event) => {
              event.stopPropagation();
              menu.removeVertex();
            });
          }
          onAdd() {
            const deleteMenu = this;
            const map = this.getMap();

            this.getPanes().floatPane.appendChild(this.div_);
            // mousedown anywhere on the map except on the menu div will close the
            // menu.
            this.divListener_ = google.maps.event.addDomListener(
                    map.getDiv(),
                    "mousedown",
                    (e) => {
                      if (e.target != deleteMenu.div_) {
                        deleteMenu.close();
                      }
                    },
                    true,
            );
          }
          onRemove() {
            if (this.divListener_) {
              google.maps.event.removeListener(this.divListener_);
            }

            this.div_.parentNode.removeChild(this.div_);
            // clean up
            this.set("position", null);
            this.set("path", null);
            this.set("vertex", null);
          }
          close() {
            this.setMap(null);
          }
          draw() {
            const position = this.get("position");
            const projection = this.getProjection();

            if (!position || !projection) {
              return;
            }

            const point = projection.fromLatLngToDivPixel(position);

            this.div_.style.top = point.y + "px";
            this.div_.style.left = point.x + "px";
          }
          /**
           * Opens the menu at a vertex of a given path.
           */
          open(map, path, vertex) {
            this.set("position", path.getAt(vertex));
            this.set("path", path);
            this.set("vertex", vertex);
            this.setMap(map);
            //this.draw();
          }
          /**
           * Deletes the vertex from the path.
           */
          removeVertex() {
            const path = this.get("path");
            const vertex = this.get("vertex");

            if (!path || vertex == undefined) {
              this.close();
              return;
            }

            path.removeAt(vertex);
            this.close();
          }
        }

        const deleteMenu = new DeleteMenu();
        google.maps.event.addListener(polyline, "contextmenu", (e) => {
          // Check if click was on a vertex control point
          if (e.vertex == undefined) {
            return;
          }

          deleteMenu.open(map, polyline.getPath(), e.vertex);
        });
      }
      function findNearbyPoint(newPoint) {
        for (const polyline of polylines) {
          const path = polyline.getPath();
          for (let i = 0; i < path.getLength(); i++) {
            const point = path.getAt(i);
            if (google.maps.geometry.spherical.computeDistanceBetween(point, newPoint) <= toleranceRadius) {
              return point;
            }
          }
        }
        return null;
      }
      function highlightVertex(event) {
        const path = currentPolyline.getPath();
        for (let i = 0; i < path.getLength(); i++) {
          if (path.getAt(i).equals(event.latLng)) {
            highlightedVertexIndex = i;
            break;
          }
        }
        updateIcons(path);
      }

      function updateIcons(path) {
        if (highlightedVertexIndex !== null) {
          let icons = currentPolyline.get('icons');
          if (!icons || icons.length === 0) {
            icons = [{
              icon: {
                path: google.maps.SymbolPath.CIRCLE,
                scale: 7,
                fillColor: '#00FF00',
                fillOpacity: 1,
                strokeWeight: 2,
                strokeColor: '#00FF00'
              },
              offset: '100%'
            }];
          }
          //icons[0].offset = (highlightedVertexIndex / path.getLength() * 100) + '%';
          currentPolyline.set('icons', icons);
        }
      }
      function createSaveBtn(map) {
        const controlButton = document.createElement("button");

        controlButton.textContent = "Save";
        controlButton.title = "Click to save the paths";
        controlButton.type = "button";
        // Setup the click event listeners: simply set the map to Chicago.
        controlButton.addEventListener("click", async () => {
          //overwriteOldPolylines();
          if (currentFloorPlanOrder === null || currentFloorPlanOrder === undefined) {
            alert('No floor plan selected');
            return;
          }

          const updateData = {
            rotation: imageOverlay.rotation,
            corners: JSON.stringify({
              northEast: { lat: cornerMarkers.northEast.getPosition().lat(), lng: cornerMarkers.northEast.getPosition().lng() },
              southWest: { lat: cornerMarkers.southWest.getPosition().lat(), lng: cornerMarkers.southWest.getPosition().lng() }
            })
          };

          const response = await fetch(`/api/floorPlans/order/${currentFloorPlanOrder}`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(updateData)
          });

          if (response.ok) {
            alert('Floor plan updated successfully');
            //await displayFloorPlans(); // Optionally, refresh the page or update the UI with the new floor plan
          } else {
            alert('Failed to update floor plan');
          }
        });
        return controlButton;
      }

      function completeCurrentPolyline() {
        if (currentPolyline) {
          currentPolyline.set('icons', []);
          currentPolyline = null;
        }
      }
      async function savePolyline(polyline) {
        const path = polyline.getPath().getArray().map(latlng => ({
          lat: latlng.lat(),
          lng: latlng.lng()
        }));

        const response = await fetch('/api/polylines', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ path })
        });

        if (!response.ok) {
          console.error('Failed to save polyline');
        }
      }
      async function loadPolylines() {
        const response = await fetch('/api/polylines');
        const polylinesData = await response.json();

        polylinesData.forEach(data => {
          const polyline = new google.maps.Polyline({
            path: data.path.map(point => new google.maps.LatLng(point.lat, point.lng)),
            strokeColor: "#8442f5",
            strokeOpacity: 1.0,
            strokeWeight: 3,
            editable: true,
            draggable: true,
            map: map
          });

          polylines.push(polyline);

          const path = polyline.getPath();
          google.maps.event.addListener(path, 'set_at', () => handleVertexDrag(path));
          google.maps.event.addListener(path, 'insert_at', () => handleVertexDrag(path));
          attachDeleteMenuListener(polyline);
          attachVertexClickListener(polyline);
        });
      }
      async function overwriteOldPolylines() {
        const response = await fetch('/api/polylines', {
          method: 'DELETE'
        });
        if (response.ok) {
          console.log('All polylines have been deleted.');
          let i;
          for(const polyline of polylines) {
            await savePolyline(polyline);
            console.log("polyline saved ", i);
          }
        } else {
          alert('Failed to delete polylines.');
        }
      }
      function togglePopup() {
        const popup = document.getElementById("popup");
        popup.style.display = popup.style.display === "none" || popup.style.display === "" ? "block" : "none";
      }

      window.initMap = initMap;
    </script>
    <style>
      #map {
        height: 100%;
      }
      html, body {
        height: 100%;
        margin: 0;
        padding: 0;
      }
      .delete-menu {
        position: relative;
        background: dodgerblue;
        padding: 5px;
        border: 2px solid orange;
        max-width: 50px;
        z-index: 1000;
        cursor: pointer;
      }
      /* General styles for the container */
      body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
      }

      /* Styles for the input text box */
      input[type="text"], input[type="number"] {
        width: 300px;
        height: 40px;
        padding: 10px;
        margin: 10px 0;
        margin-left: 20px;
        font-size: 18px;
        border: 1px solid #007bff;
        border-radius: 8px;
        box-shadow: 2px 2px 6px rgba(0, 0, 0, 0.1);
      }
      select {
        width: 100px;
        height: 40px;
        padding-left: 10px;
        margin-top: 10px;
        margin-right: 20px;
        font-size: 18px;
        border: 1px solid #007bff;
        border-radius: 8px;
        box-shadow: 2px 2px 6px rgba(0, 0, 0, 0.1);
        background-color: #fff;
      }

      /* Styles for option elements */
      select option {
        padding: 10px;
        font-size: 18px;
      }

      /* Styles for the buttons */
      input[type="button"], input[type="submit"] {
        padding-left: 5px;
        padding-right: 5px;
        height: 40px;
        margin: 10px 5px;
        font-size: 18px;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        transition: background-color 0.3s ease;
      }

      .button-primary {
        background-color: #007bff;
        color: white;
      }

      .button-primary:hover {
        background-color: #0056b3;
      }

      .button-secondary {
        background-color: #6c757d;
        color: white;
      }

      .button-secondary:hover {
        background-color: #5a6268;
      }
      .button-label {

        font-size: 16px; /* Slightly smaller font size for subtlety */
        color: #555; /* Softer color for text */
      }
      #instructions {
        display: none;
        margin: 20px 0;
        margin-left: 20px;
        padding: 10px;
        font-size: 18px;
        color: #333;
        border: 1px solid black;
        background-color: #f0f0f0; /* Light grey background */
        border-radius: 8px; /* Rounded edges */
        box-shadow: 2px 2px 6px rgba(0, 0, 0, 0.1); /* Optional: subtle shadow for better visual separation */
      }
      .popup {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: #fff;
        border: 1px solid black;
        box-shadow: 0px 4px 8px rgba(0,0,0,0.2);
        z-index: 1000;
        display: none; /* Hidden by default */
        padding: 20px;
        border-radius: 10px;
        width: 400px; /* Set width to 400px */
      }
      .slider-container {
        display: flex;
        flex-direction: column;
        margin-top: 10px;
        padding: 10px;
        align-items: center;
        background-color: #fafafa;
        border: 1px solid #ddd; /* Light border to distinguish the label */
        border-radius: 18px; /* Slightly rounded edges */
        box-shadow: none; /* Remove shadow for a flatter look */
        font-style: italic;
        opacity: 70%;
      }
      .vertical-container {
        display: flex;
        flex-direction: column;
        margin-right: 10px;
        gap: 5px;
        padding: 10px;
        align-items: center;
      }
      .horizontal-container {
        display: flex;
        flex-direction: row;
        margin-top: 10px;
        padding: 10px;
        gap: 10px;
        align-items: center;
      }

      .popup-content {
        position: relative;
        padding: 10px;
      }

      .close-btn {
        position: absolute;
        top: 10px;
        right: 10px;
        font-size: 20px;
        cursor: pointer;
        color: #333;
      }
      .floorSelector-button {
        width: 10px;
        height: 10px;
        background-color: white;
        border: 1px solid #ccc;
        padding: 10px;
        cursor: pointer;
        text-align: center;
        border-radius: 5px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.2);
      }

      .popup h2 {
        margin-top: 0;
        font-size: 24px;
        font-weight: 400;
        border-bottom: 2px solid #007bff;
        padding-bottom: 10px;
        margin-bottom: 20px;
      }

      .popup label {
        font-size: 20px;
        display: block;
      }
      input[type="range"] {
        margin-top: 20px;
        min-width: 40px;
      }

      .popup input[type="text"], .popup input[type="number"], .popup input[type="file"] {
        width: calc(100% - 20px);
        padding: 10px;
        margin: 10px 0;
        font-size: 16px;
        border: 1px solid #007bff;
        border-radius: 5px;
      }

      .popup input[type="submit"], .popup button {
        width: 100%;
        padding: 10px;
        font-size: 16px;
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s ease;
      }

      .popup input[type="submit"]:hover {
        background-color: #0056b3;
      }
      .button-container {
        display: flex;
        justify-content: flex-end;
        align-items: center;
        gap: 10px;
      }
      .button-container button, .button-container input[type="submit"] {
        height: 40px;
      }
    </style>
  </head>
  <body>
  <div id="popup" class="popup">
    <div class="popup-content">
      <form id="floorPlanForm" enctype="multipart/form-data">
        <label for="name">Floor name:</label><br>
        <input type="text" id="name" name="name" required><br><br>
        <label for="order">Order:</label><br>
        <input type="number" value="0" id="order" name="order" required><br><br>

        <label for="image">Upload an image of the floorplan:</label><br>
        <input type="file" id="image" name="image" accept="image/*" required><br><br>

        <div class="button-container">
          <button type="button" class="button-primary" style="background-color: red;" onclick="togglePopup()">Cancel</button>
          <input type="submit" value="Create" class="button-primary">
        </div>
      </form>
    </div>
  </div>
  <div id="map"></div>
  <script>(g=>{var h,a,k,p="The Google Maps JavaScript API",c="google",l="importLibrary",q="__ib__",m=document,b=window;b=b[c]||(b[c]={});var d=b.maps||(b.maps={}),r=new Set,e=new URLSearchParams,u=()=>h||(h=new Promise(async(f,n)=>{await (a=m.createElement("script"));e.set("libraries",[...r]+"");for(k in g)e.set(k.replace(/[A-Z]/g,t=>"_"+t[0].toLowerCase()),g[k]);e.set("callback",c+".maps."+q);a.src=`https://maps.${c}apis.com/maps/api/js?`+e;d[q]=f;a.onerror=()=>h=n(Error(p+" could not load."));a.nonce=m.querySelector("script[nonce]")?.nonce||"";m.head.append(a)}));d[l]?console.warn(p+" only loads once. Ignoring:",g):d[l]=(f,...n)=>r.add(f)&&u().then(()=>d[l](f,...n))})
    ({key: "AIzaSyCFRCi9RiQ6jNMjspjXa6wVSVH7rbBnIGc", v: "weekly"});</script>
  </body>
</html>

